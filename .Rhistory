v111 = c(0.10843610, -0.01179517, 0.99013864)
angle(v111, v33)
angle(v111, v36)
angle(v111, v49)
angle(v111, c(0,0,1))*180/pi
angle(v111, v49)*180/pi
angle(v111, v33)
angle(v111,v33)
angle(v111,v36)
angle(v111,v49)
angle(v33,v49)*180/pi
angle(v33,v36)*180/pi
angle(v33,v49)*180/pi
180/pi
angle(c(0,0,1),v111)
angle(c(0,0,1),v111) * 180/pi
xs1 =    c(0.1,  1.1,  1.5, 2.4,  2.9, 4.2, 4.4, 4.7,  5.65)
ys1 =    c(4.75, 4.25, 5.2, 4.15, 4.9, 3.9, 0.8, 2.35, 0.85)
xs2 =    c(0.15, 0.2,  0.3, 0.6,  1.4, 2.0, 2.6, 2.7, 4.3,  4.3, 4.6, 5.6)
ys2 = -  c(4.6,  3.45, 2.7, 3.05, 2.6, 2.5, 4.6, 4.8, 0.05, 0.9, 3.1, 1.9)
xs3 = -  c(1.15, 1.9, 2.45, 4.5, 4.7,  5.4)
ys3 = -  c(4.25, 2.9, 3.85, 2.6, 2.75, 0.4)
xs4 = -  c(0.2, 0.5, 1.6, 2.0, 3.2, 3.6, 4.1, 4.5, 4.5)
ys4 =    c(3.2, 4.6, 3.1, 4.2, 2.8, 2.2, 1.5, 2.5, 3.6)
xs = c(xs1,xs2,xs3,xs4)*10
ys = c(ys1,ys2,ys3,ys4)*10
# Calculates vectors
# Obliczenie wektorow: minus-promien-padajacy , promien-ugiety , wektor-normalny
getv1 = function(r) c(0, 0, r) #incident
getv2 = function(r, x, y) c(x, y, r) #bent
getvn = function(v1, v2, r) normalize( normalize(v1)+normalize(v2) ) * r #normal
#Transform reflected image coordinates (x,y) into angles of normal vectors on the sphere
#Przelicza wspolrzedne (x,y) na obrazie zwrotnym na katy wektorow normalnych na sferze
snr_coords = function(xs, ys, r) {
thetas = c(); fis = c(); vxs = c(); vys = c(); vzs = c()
for (i in 1:length(xs)) {
x = xs[i]; y = ys[i]
v1 = getv1(r); v2 = getv2(r,x,y)
v = getvn(v1, v2, r)
theta = gettheta(r, v); fi = getfi(r, v)
thetas = c(thetas, theta); fis = c(fis, fi)
vxs = c(vxs, v[1]); vys = c(vys, v[2]); vzs = c(vzs, v[3])
}
return( list(xs=xs, ys=ys, thetas=thetas, fis=fis, vxs=vxs, vys=vys, vzs=vzs) )
}
t =
# Calculates vectors
# Obliczenie wektorow: minus-promien-padajacy , promien-ugiety , wektor-normalny
getv1 = function(r) c(0, 0, r) #incident
getv2 = function(r, x, y) c(x, y, r) #bent
getvn = function(v1, v2, r) normalize( normalize(v1)+normalize(v2) ) * r #normal
#Transform reflected image coordinates (x,y) into angles of normal vectors on the sphere
#Przelicza wspolrzedne (x,y) na obrazie zwrotnym na katy wektorow normalnych na sferze
snr_coords = function(xs, ys, r) {
thetas = c(); fis = c(); vxs = c(); vys = c(); vzs = c()
for (i in 1:length(xs)) {
x = xs[i]; y = ys[i]
v1 = getv1(r); v2 = getv2(r,x,y)
v = getvn(v1, v2, r)
theta = gettheta(r, v); fi = getfi(r, v)
thetas = c(thetas, theta); fis = c(fis, fi)
vxs = c(vxs, v[1]); vys = c(vys, v[2]); vzs = c(vzs, v[3])
}
return( list(xs=xs, ys=ys, thetas=thetas, fis=fis, vxs=vxs, vys=vys, vzs=vzs) )
}
t=
# Calculates vectors
# Obliczenie wektorow: minus-promien-padajacy , promien-ugiety , wektor-normalny
getv1 = function(r) c(0, 0, r) #incident
getv2 = function(r, x, y) c(x, y, r) #bent
getvn = function(v1, v2, r) normalize( normalize(v1)+normalize(v2) ) * r #normal
#Transform reflected image coordinates (x,y) into angles of normal vectors on the sphere
#Przelicza wspolrzedne (x,y) na obrazie zwrotnym na katy wektorow normalnych na sferze
snr_coords = function(xs, ys, r) {
thetas = c(); fis = c(); vxs = c(); vys = c(); vzs = c()
for (i in 1:length(xs)) {
x = xs[i]; y = ys[i]
v1 = getv1(r); v2 = getv2(r,x,y)
v = getvn(v1, v2, r)
theta = gettheta(r, v); fi = getfi(r, v)
thetas = c(thetas, theta); fis = c(fis, fi)
vxs = c(vxs, v[1]); vys = c(vys, v[2]); vzs = c(vzs, v[3])
}
return( list(xs=xs, ys=ys, thetas=thetas, fis=fis, vxs=vxs, vys=vys, vzs=vzs) )
}
t = snr_coord(xs,ys,r)
t = snr_coords(xs,ys,r)
v18 = c(t$vxs[18], t$vys[18], t$vzs[18])
angle(v18, c(0,0,1))
angle(v18, c(0,0,1))*180/pi
get_plane
angle(plane_normal(r,1,1,1), plane_normal(r,1,1,0))
angle(plane_normal(r,1,1,1), plane_normal(r,1,1,0))*180/pi
x = xs[18]
y = ys[18]
acos(r/sqrt(x*x+y*y+r*r))/2 * 180/pi
acos(r/sqrt(x*x+y*y+r*r))/2
abs(-r*x/(sqrt(y^2+x^2)*(2*y^2+2*x^2+2*r^2)))*2+abs(-r*y/(sqrt(y^2+x^2)*(2*y^2+2*x^2+2*r^2)))*2+abs(sqrt(y^2+x^2)/(2*y^2+2*x^2+2*r^2))
abs(-r*x/(sqrt(y^2+x^2)*(2*y^2+2*x^2+2*r^2)))*2+abs(-r*y/(sqrt(y^2+x^2)*(2*y^2+2*x^2+2*r^2)))*2+abs(sqrt(y^2+x^2)/(2*y^2+2*x^2+2*r^2)) * 180/pi
#DATA:
r = 40
#Przechodzace:
xs1 =    c(0.1,  0.5, 1.1, 1.2, 1.6, 1.8, 2.0, 2.05, 2.5,  2.6, 2.75, 3.1, 3.5, 3.5, 4.05, 4.35, 4.5)
ys1 =    c(2.65, 4.0, 1.6, 3.9, 2.8, 1.9, 0.5, 3.4,  2.75, 2.0, 4.6,  0.4, 1.8, 3.5, 1.5,  1.25, 3.1)
xs2 =    c(0.2, 1.0, 0.95, 1.5, 1.7,  1.85, 1.9, 2.45, 2.5, 3.1, 3.3, 3.4, 4.0, 4.3, 4.3, 5.05)
ys2 = -  c(4.2, 1.8, 4.25, 2.9, 2.25, 3.75, 0.8, 2.4,  5.1, 0.8, 4.0, 2.4, 2.0, 1.8, 3.7, 0.25)
xs3 = -  c(0.1, 0.45, 1.4, 1.6, 1.5,  2.0, 2.4, 2.85, 2.9, 3.0, 3.45, 4.0, 4.8)
ys3 = -  c(2.8, 2.85, 2.3, 4.5, 5.55, 0.0, 0.6, 2.75, 0.0, 4.6, 2.75, 2.7, 2.5)
xs4 = -  c(0.3, 1.1, 1.2, 1.25, 2.35, 2.6, 2.6, 3.2, 3.75, 5.3, 4.55)
ys4 =    c(2.7, 5.3, 2.2, 4.3,  0.6,  2.7, 4.5, 2.8, 2.8,  2.3, 2.6)
xs = c(xs1,xs2,xs3,xs4)*10
ys = c(ys1,ys2,ys3,ys4)*10
# Transform transitive image coordinates (x,y) into angles of normal vectors on the sphere
# Przelicza wspolrzedne (x,y) na obrazie przechodzacym na katy wektorow normalnych na sferze
snt_coords = function(xs, ys, r) {
thetas = c(); fis = c(); vxs = c(); vys = c(); vzs = c()
for (i in 1:length(xs)) {
x = xs[i]; y = ys[i]
v1 = getv1(r); v2 = getv2(r,x,y)
v = getvn(v1, v2, r)
theta = gettheta(r, v); fi = getfi(r, v)
thetas = c(thetas, theta); fis = c(fis, fi)
vxs = c(vxs, v[1]); vys = c(vys, v[2]); vzs = c(vzs, v[3])
}
return( list(xs=xs, ys=ys, thetas=thetas, fis=fis, vxs=vxs, vys=vys, vzs=vzs) )
}
# Vector operations
veclen = function(v)  sqrt(sum(v*v))
normalize = function(v)  v/veclen(v)
#Returns vector between two vectors v1, v2
angle = function(v1, v2) acos( v1%*%v2 / veclen(v1) / veclen(v2) )
# Converts coordinates from v=(x,y,z) (point on the sphere) into angles
# Przeliczenie wspolrzednych v=(x,y,z) (wektor na sferze) na katy na sferze
gettheta = function(r, v) asin(v[2]/r)
getfi = function(r, v) atan(v[1]/v[3])
plane_normal = function(r, h,k,l) {
d = h*h + k*k + l*l
x = r*h / d
y = r*k / d
z = r*l / d
return( c(x,y,z) )
}
# Calculates vectors
# Obliczenie wektorow: minus-promien-padajacy , promien-ugiety , wektor-normalny
getv1 = function(r) c(0, 0, -r) #incident
getv2 = function(r, x, y) c(x, y, r) #bent
getvn = function(v1, v2, r) - normalize( normalize(v1)+normalize(v2) ) * r #normal
t = snt_coords(xs,ys,r)
t
d = 5.43/sqrt(3)
d
t33 = pi/2
t33
t33 = pi/2 - 1/2*acos(-r/sqrt(xs[33]^2+ys[33]^2+r^2))
t33
t36 = pi/2 - 1/2*acos(-r/sqrt(xs[36]^2+ys[36]^2+r^2))
t49 = pi/2 - 1/2*acos(-r/sqrt(xs[49]^2+ys[49]^2+r^2))
t33
t36
t49
t33*57
t36*57
t49*57
l33 = 2*d*sin(t33)
l33
l36 = 2*d*sin(t36)
l36
l49 = 2*d*sin(t49)
l49
t33 * 180/pi
t36 * 180/pi
t49 * 180/pi
l33
l33 * 180/pi
l33
l36
t49
l49
d
r
xs
x = xs[33]
y = ys[33]
2*abs(2*d*r^2*x*sqrt(y^2+x^2+r^2)/(sqrt(y^2+x^2)*(y^4+(2*x^2+2*r^2)*y^2+x^4+2*r^2*x^2+r^4))) + 2*abs( 2*d*r^2*y*sqrt(y^2+x^2+r^2)/(sqrt(y^2+x^2)*(y^4+(2*x^2+2*r^2)*y^2+x^4+2*r^2*x^2+r^4)) ) + 1*abs( -sqrt(y^2+x^2+r^2)*(2*d*r*y^2+2*d*r*x^2)/(sqrt(y^2+x^2)*(y^4+(2*x^2+2*r^2)*y^2+x^4+2*r^2*x^2+r^4)) )
x = xs[36]
y = ys[36]
2*abs(2*d*r^2*x*sqrt(y^2+x^2+r^2)/(sqrt(y^2+x^2)*(y^4+(2*x^2+2*r^2)*y^2+x^4+2*r^2*x^2+r^4))) + 2*abs( 2*d*r^2*y*sqrt(y^2+x^2+r^2)/(sqrt(y^2+x^2)*(y^4+(2*x^2+2*r^2)*y^2+x^4+2*r^2*x^2+r^4)) ) + 1*abs( -sqrt(y^2+x^2+r^2)*(2*d*r*y^2+2*d*r*x^2)/(sqrt(y^2+x^2)*(y^4+(2*x^2+2*r^2)*y^2+x^4+2*r^2*x^2+r^4)) )
x = xs[49]
y = ys[49]
2*abs(2*d*r^2*x*sqrt(y^2+x^2+r^2)/(sqrt(y^2+x^2)*(y^4+(2*x^2+2*r^2)*y^2+x^4+2*r^2*x^2+r^4))) + 2*abs( 2*d*r^2*y*sqrt(y^2+x^2+r^2)/(sqrt(y^2+x^2)*(y^4+(2*x^2+2*r^2)*y^2+x^4+2*r^2*x^2+r^4)) ) + 1*abs( -sqrt(y^2+x^2+r^2)*(2*d*r*y^2+2*d*r*x^2)/(sqrt(y^2+x^2)*(y^4+(2*x^2+2*r^2)*y^2+x^4+2*r^2*x^2+r^4)) )
evalprob = function(n, k=log(n), L=50) {
oks = 0
for (i in 1:L) {
X = cbind(rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n))
e = rnorm(n)
B = c(1,1,1,0,0,0,0,0,0)
Y = X%*%B + e
d = data.frame(X=X, Y=Y)
attach(d)
l_null = lm(Y~0, data=d)
l_full=lm(Y~., data=d)
l_sel = step(l_null,direction="both", scope=list(lower=~1, upper=l_full),  k=k)
ok = setequal( c("X.1","X.2","X.3"), names(l_sel$coefficients) )
oks = oks + ok
}
prob = oks / L
return (prob)
}
N = c(25, 50, 75, 100, 125, 150, 175, 200)
AIC = c()
BIC = c()
for (n in N) {
AIC = c(AIC, evalprob(n, k=2) )
BIC = c(BIC, evalprob(n, k=log(n)) )
}
AIC
BIC
evalprob = function(n, k=log(n), L=50) {
oks = 0;
for (i in 1:L) {
X = cbind(rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n));
e = rnorm(n);
B = c(1,1,1,0,0,0,0,0,0);
Y = X%*%B + e;
d = data.frame(X=X, Y=Y);
attach(d);
l_null = lm(Y~0, data=d);
l_full=lm(Y~., data=d);
l_sel = step(l_null,direction="both", scope=list(lower=~1, upper=l_full),  k=k);
ok = setequal( c("X.1","X.2","X.3"), names(l_sel$coefficients) );
oks = oks + ok;
}
prob = oks / L;
return (prob);
}
AIC
for (n in c(150,175,200)) {
AIC = c(AIC, evalprob(n, k=2) )
BIC = c(BIC, evalprob(n, k=log(n)) )
}
AIC
BIC
plot(n,BIC)
n
plot(N,BIC)
plot(N,AIC)
N = c(25, 50, 75, 100, 125, 150, 175, 200)
AIC = c()
BIC = c()
for (n in N) {
AIC = c(AIC, evalprob(n, k=2) )
BIC = c(BIC, evalprob(n, k=log(n)) )
}
evalprob = function(n, k=log(n), L=50) {
oks = 0;
for (i in 1:L) {
X = cbind(rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n));
e = rnorm(n);
B = c(1,1,1,0,0,0,0,0,0);
Y = X%*%B + e;
d = data.frame(X=X, Y=Y);
attach(d);
l_null = lm(Y~0, data=d);
l_full=lm(Y~., data=d);
l_sel = step(l_null,direction="both", scope=list(lower=~0, upper=l_full),  k=k);
ok = setequal( c("X.1","X.2","X.3"), names(l_sel$coefficients) );
oks = oks + ok;
}
prob = oks / L;
return (prob);
}
N = c(25, 50, 75, 100, 125, 150, 175, 200)
AIC = c()
BIC = c()
for (n in N) {
AIC = c(AIC, evalprob(n, k=2) )
BIC = c(BIC, evalprob(n, k=log(n)) )
}
evalprob = function(n, k=log(n), L=50) {
oks = 0;
for (i in 1:L) {
X = cbind(rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n));
e = rnorm(n);
B = c(1,1,1,0,0,0,0,0,0);
Y = X%*%B + e;
d = data.frame(X=X, Y=Y);
attach(d);
l_null = lm(Y~0, data=d);
l_full=lm(Y~., data=d);
l_sel = step(l_null,direction="both", scope=list(lower=~0, upper=l_full),  k=k);
ok = setequal( c("X.1","X.2","X.3"), names(l_sel$coefficients) );
oks = oks + ok;
}
prob = oks / L;
return (prob);
}
#N = c(25, 50, 75, 100, 125, 150, 175, 200)
N = c(50, 100,150, 200)
AIC = c()
BIC = c()
for (n in N) {
AIC = c(AIC, evalprob(n, k=2) )
BIC = c(BIC, evalprob(n, k=log(n)) )
}
evalprob = function(n, k=log(n), L=50) {
oks = 0;
for (i in 1:L) {
X = cbind(rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n));
e = rnorm(n);
B = c(1,1,1,0,0,0,0,0,0);
Y = X%*%B + e;
l_null = lm(Y~0, data=data.frame(X=X, Y=Y));
l_sel = step(l_null,direction="both",  k=k);
ok = setequal( c("X.1","X.2","X.3"), names(l_sel$coefficients) );
oks = oks + ok;
}
prob = oks / L;
return (prob);
}
N = c(25, 50, 75, 100, 125, 150, 175, 200)
#N = c(50, 100,150, 200)
AIC = c()
BIC = c()
for (n in N) {
AIC = c(AIC, evalprob(n, k=2) )
BIC = c(BIC, evalprob(n, k=log(n)) )
}
AIC
BIC
evalprob = function(n, k=log(n), L=50) {
oks = 0;
for (i in 1:L) {
X = cbind(rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n));
e = rnorm(n);
B = c(1,1,1,0,0,0,0,0,0);
Y = X%*%B + e;
l_null = lm(Y~0, data=data.frame(X=X, Y=Y));
l_sel = step(l_null,direction="both",  k=k);
ok = setequal( c("X.1","X.2","X.3"), names(l_sel$coefficients) );
oks = oks + ok;
}
prob = oks / L;
return (prob);
}
N = c(25, 50, 75, 100, 125, 150, 175, 200)
#N = c(50, 100,150, 200)
AIC = c()
BIC = c()
for (n in N) {
AIC = c(AIC, evalprob(n, k=2) )
BIC = c(BIC, evalprob(n, k=log(n)) )
}
AIC
BIC
evalprob = function(n, k=log(n), L=50) {
oks = 0;
for (i in 1:L) {
X = cbind(rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n));
e = rnorm(n);
B = c(1,1,1,0,0,0,0,0,0);
Y = X%*%B + e;
d = data.frame(X=X, Y=Y);
attach(d);
l_null = lm(Y~0, data=d);
l_sel = step(l_null,direction="both", scope=list(lower=~0, upper=l_full),  k=k);
ok = setequal( c("X.1","X.2","X.3"), names(l_sel$coefficients) );
oks = oks + ok;
}
prob = oks / L;
return (prob);
}
N = c(25, 50, 75, 100, 125, 150, 175, 200)
AIC = c()
BIC = c()
for (n in N) {
AIC = c(AIC, evalprob(n, k=2) )
BIC = c(BIC, evalprob(n, k=log(n)) )
}
evalprob = function(n, k=log(n), L=50) {
oks = 0;
for (i in 1:L) {
X = cbind(rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n));
e = rnorm(n);
B = c(1,1,1,0,0,0,0,0,0);
Y = X%*%B + e;
d = data.frame(X=X, Y=Y);
attach(d);
l_null = lm(Y~0, data=d);
l_full = lm(Y~., data=d);
l_sel = step(l_null,direction="both", scope=list(lower=~0, upper=l_full),  k=k);
ok = setequal( c("X.1","X.2","X.3"), names(l_sel$coefficients) );
oks = oks + ok;
}
prob = oks / L;
return (prob);
}
N = c(25, 50, 75, 100, 125, 150, 175, 200)
AIC = c()
BIC = c()
for (n in N) {
AIC = c(AIC, evalprob(n, k=2) )
BIC = c(BIC, evalprob(n, k=log(n)) )
}
evalprob = function(n, k=log(n), L=50) {
oks = 0;
for (i in 1:L) {
X = cbind(rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n),rnorm(n));
e = rnorm(n);
B = c(1,1,1,0,0,0,0,0,0);
Y = X%*%B + e;
d = data.frame(X=X, Y=Y);
attach(d);
#l_null = lm(Y~0, data=d);
#l_full = lm(Y~., data=d);
#l_sel = step(l_null,direction="both", scope=list(lower=~0, upper=l_full),  k=k);
l_sel = step(lm(Y~., data=d),direction="both"  k=k);
ok = setequal( c("X.1","X.2","X.3"), names(l_sel$coefficients) );
oks = oks + ok;
}
prob = oks / L;
return (prob);
}
N = c(25, 50, 75, 100, 125, 150, 175, 200)
AIC = c()
BIC = c()
for (n in N) {
AIC = c(AIC, evalprob(n, k=2) )
BIC = c(BIC, evalprob(n, k=log(n)) )
}
?qnorm
qnorm(0.95)
qnorm(0.975)
3.5
3.5
5
5
4.5
4.5
3.5
4.5
5
4
5
5
4
2
4.5
2
5
2
x = c(3.5,3.5,5,5,4.5,4.5,3.5,4.5,5,4,5,5,4,2,4.5,2,5,2)
mean(x)
hist(x)
std(x)
sd(x)
sum(x>4.5)
sum(x>=4.5)
sum(x<4.5)
y = c(13,13.5,21,19,18,17,13.5,16,19,15.5,17.5,17,13.5,5,15.5,7,17.5,8.5)
mean(y)
sd(y)
length(y)
sum(y>17)
sum(<>17)
sum(y<17)
hist(y)
hist(y, split=1)
hist(y, split=100)
?hist
hist(y, breaks=100)
m <- list(c(1:2), c(1:5))
m[1]
m[[1]]
class(m[1])
class(m[[1])
class(m[[1]])
a = m[[1]]
path1 = "/media/Dane/PROJEKTY/lic/merged/unweighted_events.merged.h126.csv"
path2 = "/media/Dane/PROJEKTY/lic/merged/unweighted_events.merged.h10e10.csv"
d1 = read.table(path1, header = TRUE, sep =",")
d2 = read.table(path2, header = TRUE, sep =",")
names(d1)
head(d1)
hist(d1$etal1)
hist(d2$etal1)
hist(abs(d2$etal1))
hist(abs(d2$etal2))
hist(abs(d2$etal1))
hist(abs(d2$etal2))
?hist
plot(density(d1$etal1))
plot(density(d2$etal1))
hist(d2$etal1, d1$etal2)
hist(d2$etal1, d1$etal1)
?hist
setwd("/media/Dane/PROJEKTY/lic/bscp/LHEanalysis/")
ls
path1 = "../data/ppjjww_muvm_h1e10_genok.csv"
path2 = "../data/ppjjww_muvm_h126c10_genok.csv"
d1 = read.table(path1, header = TRUE, sep =",")
dim(d1)
path1 = "../../data/ppjjww_muvm_h1e10_genok.csv"
path2 = "../../data/ppjjww_muvm_h126c10_genok.csv"
d1 = read.table(path1, header = TRUE, sep =",")
d2 = read.table(path2, header = TRUE, sep =",")
head(d1)
plot(d1$M_l1l2)
hist(d1$M_l1l2)
max(d1$M_l1l2)
min(d1$M_l1l2)
mean(d1$M_l1l2)
sd(d1$M_l1l2)
